/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: complete.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./shared_values";
import * as dependency_2 from "./machine_id";
import * as dependency_3 from "./production_line";
import * as pb_1 from "google-protobuf";
export namespace dbos {
    export class CompleteConfig extends pb_1.Message {
        constructor(data?: any[] | {
            version?: string;
            config_type?: dependency_1.dbos.ConfigType;
            mqtt_broker_address?: string;
            wildcard?: string;
            splitting_character?: string;
            machine_map?: Map<string, dependency_2.dbos.MachineIdConfig>;
            production_line_map?: Map<string, dependency_3.dbos.ProductionLine>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("config_type" in data && data.config_type != undefined) {
                    this.config_type = data.config_type;
                }
                if ("mqtt_broker_address" in data && data.mqtt_broker_address != undefined) {
                    this.mqtt_broker_address = data.mqtt_broker_address;
                }
                if ("wildcard" in data && data.wildcard != undefined) {
                    this.wildcard = data.wildcard;
                }
                if ("splitting_character" in data && data.splitting_character != undefined) {
                    this.splitting_character = data.splitting_character;
                }
                if ("machine_map" in data && data.machine_map != undefined) {
                    this.machine_map = data.machine_map;
                }
                if ("production_line_map" in data && data.production_line_map != undefined) {
                    this.production_line_map = data.production_line_map;
                }
            }
            if (!this.machine_map)
                this.machine_map = new Map();
            if (!this.production_line_map)
                this.production_line_map = new Map();
        }
        get version() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_type() {
            return pb_1.Message.getField(this, 2) as dependency_1.dbos.ConfigType;
        }
        set config_type(value: dependency_1.dbos.ConfigType) {
            pb_1.Message.setField(this, 2, value);
        }
        get mqtt_broker_address() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set mqtt_broker_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get wildcard() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set wildcard(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get splitting_character() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set splitting_character(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get machine_map() {
            return pb_1.Message.getField(this, 6) as any as Map<string, dependency_2.dbos.MachineIdConfig>;
        }
        set machine_map(value: Map<string, dependency_2.dbos.MachineIdConfig>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get production_line_map() {
            return pb_1.Message.getField(this, 7) as any as Map<string, dependency_3.dbos.ProductionLine>;
        }
        set production_line_map(value: Map<string, dependency_3.dbos.ProductionLine>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        static fromObject(data: {
            version?: string;
            config_type?: dependency_1.dbos.ConfigType;
            mqtt_broker_address?: string;
            wildcard?: string;
            splitting_character?: string;
            machine_map?: {
                [key: string]: ReturnType<typeof dependency_2.dbos.MachineIdConfig.prototype.toObject>;
            };
            production_line_map?: {
                [key: string]: ReturnType<typeof dependency_3.dbos.ProductionLine.prototype.toObject>;
            };
        }) {
            const message = new CompleteConfig({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.config_type != null) {
                message.config_type = data.config_type;
            }
            if (data.mqtt_broker_address != null) {
                message.mqtt_broker_address = data.mqtt_broker_address;
            }
            if (data.wildcard != null) {
                message.wildcard = data.wildcard;
            }
            if (data.splitting_character != null) {
                message.splitting_character = data.splitting_character;
            }
            if (typeof data.machine_map == "object") {
                message.machine_map = new Map(Object.entries(data.machine_map).map(([key, value]) => [key, dependency_2.dbos.MachineIdConfig.fromObject(value)]));
            }
            if (typeof data.production_line_map == "object") {
                message.production_line_map = new Map(Object.entries(data.production_line_map).map(([key, value]) => [key, dependency_3.dbos.ProductionLine.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
                config_type?: dependency_1.dbos.ConfigType;
                mqtt_broker_address?: string;
                wildcard?: string;
                splitting_character?: string;
                machine_map?: {
                    [key: string]: ReturnType<typeof dependency_2.dbos.MachineIdConfig.prototype.toObject>;
                };
                production_line_map?: {
                    [key: string]: ReturnType<typeof dependency_3.dbos.ProductionLine.prototype.toObject>;
                };
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.config_type != null) {
                data.config_type = this.config_type;
            }
            if (this.mqtt_broker_address != null) {
                data.mqtt_broker_address = this.mqtt_broker_address;
            }
            if (this.wildcard != null) {
                data.wildcard = this.wildcard;
            }
            if (this.splitting_character != null) {
                data.splitting_character = this.splitting_character;
            }
            if (this.machine_map.size > 0) {
                data.machine_map = Object.fromEntries(Array.from(this.machine_map).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.production_line_map.size > 0) {
                data.production_line_map = Object.fromEntries(Array.from(this.production_line_map).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(1, this.version);
            if (this.config_type !== undefined)
                writer.writeEnum(2, this.config_type);
            if (typeof this.mqtt_broker_address === "string" && this.mqtt_broker_address.length)
                writer.writeString(3, this.mqtt_broker_address);
            if (typeof this.wildcard === "string" && this.wildcard.length)
                writer.writeString(4, this.wildcard);
            if (typeof this.splitting_character === "string" && this.splitting_character.length)
                writer.writeString(5, this.splitting_character);
            for (const [key, value] of this.machine_map) {
                writer.writeMessage(6, this.machine_map, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.production_line_map) {
                writer.writeMessage(7, this.production_line_map, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    case 2:
                        message.config_type = reader.readEnum();
                        break;
                    case 3:
                        message.mqtt_broker_address = reader.readString();
                        break;
                    case 4:
                        message.wildcard = reader.readString();
                        break;
                    case 5:
                        message.splitting_character = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.machine_map as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_2.dbos.MachineIdConfig.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.production_line_map as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.dbos.ProductionLine.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteConfig {
            return CompleteConfig.deserialize(bytes);
        }
    }
}
