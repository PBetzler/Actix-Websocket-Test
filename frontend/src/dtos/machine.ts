/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: machine.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./helper";
import * as pb_1 from "google-protobuf";
export namespace dtos {
    export class Machines extends pb_1.Message {
        constructor(data?: any[] | {
            machines?: Machine[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("machines" in data && data.machines != undefined) {
                    this.machines = data.machines;
                }
            }
        }
        get machines() {
            return pb_1.Message.getRepeatedWrapperField(this, Machine, 1) as Machine[];
        }
        set machines(value: Machine[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            machines?: ReturnType<typeof Machine.prototype.toObject>[];
        }) {
            const message = new Machines({});
            if (data.machines != null) {
                message.machines = data.machines.map(item => Machine.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                machines?: ReturnType<typeof Machine.prototype.toObject>[];
            } = {};
            if (this.machines != null) {
                data.machines = this.machines.map((item: Machine) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.machines !== undefined)
                writer.writeRepeatedMessage(1, this.machines, (item: Machine) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Machines {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Machines();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.machines, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Machine.deserialize(reader), Machine));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Machines {
            return Machines.deserialize(bytes);
        }
    }
    export class Machine extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            machine_name?: string;
            manufacturer?: string;
            parameters?: Parameter[];
            image?: string;
            view_elements?: dependency_1.universal.ViewElement[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("machine_name" in data && data.machine_name != undefined) {
                    this.machine_name = data.machine_name;
                }
                if ("manufacturer" in data && data.manufacturer != undefined) {
                    this.manufacturer = data.manufacturer;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("view_elements" in data && data.view_elements != undefined) {
                    this.view_elements = data.view_elements;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get machine_name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set machine_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get manufacturer() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set manufacturer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get parameters() {
            return pb_1.Message.getRepeatedWrapperField(this, Parameter, 4) as Parameter[];
        }
        set parameters(value: Parameter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get image() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set image(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get view_elements() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.universal.ViewElement, 6) as dependency_1.universal.ViewElement[];
        }
        set view_elements(value: dependency_1.universal.ViewElement[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            machine_name?: string;
            manufacturer?: string;
            parameters?: ReturnType<typeof Parameter.prototype.toObject>[];
            image?: string;
            view_elements?: ReturnType<typeof dependency_1.universal.ViewElement.prototype.toObject>[];
        }) {
            const message = new Machine({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.machine_name != null) {
                message.machine_name = data.machine_name;
            }
            if (data.manufacturer != null) {
                message.manufacturer = data.manufacturer;
            }
            if (data.parameters != null) {
                message.parameters = data.parameters.map(item => Parameter.fromObject(item));
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.view_elements != null) {
                message.view_elements = data.view_elements.map(item => dependency_1.universal.ViewElement.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                machine_name?: string;
                manufacturer?: string;
                parameters?: ReturnType<typeof Parameter.prototype.toObject>[];
                image?: string;
                view_elements?: ReturnType<typeof dependency_1.universal.ViewElement.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.machine_name != null) {
                data.machine_name = this.machine_name;
            }
            if (this.manufacturer != null) {
                data.manufacturer = this.manufacturer;
            }
            if (this.parameters != null) {
                data.parameters = this.parameters.map((item: Parameter) => item.toObject());
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.view_elements != null) {
                data.view_elements = this.view_elements.map((item: dependency_1.universal.ViewElement) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.machine_name === "string" && this.machine_name.length)
                writer.writeString(2, this.machine_name);
            if (typeof this.manufacturer === "string" && this.manufacturer.length)
                writer.writeString(3, this.manufacturer);
            if (this.parameters !== undefined)
                writer.writeRepeatedMessage(4, this.parameters, (item: Parameter) => item.serialize(writer));
            if (typeof this.image === "string" && this.image.length)
                writer.writeString(5, this.image);
            if (this.view_elements !== undefined)
                writer.writeRepeatedMessage(6, this.view_elements, (item: dependency_1.universal.ViewElement) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Machine {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Machine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.machine_name = reader.readString();
                        break;
                    case 3:
                        message.manufacturer = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.parameters, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Parameter.deserialize(reader), Parameter));
                        break;
                    case 5:
                        message.image = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.view_elements, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.universal.ViewElement.deserialize(reader), dependency_1.universal.ViewElement));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Machine {
            return Machine.deserialize(bytes);
        }
    }
    export class Parameter extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            unit?: string;
            default_value?: string;
            min_value?: string;
            max_value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("unit" in data && data.unit != undefined) {
                    this.unit = data.unit;
                }
                if ("default_value" in data && data.default_value != undefined) {
                    this.default_value = data.default_value;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get unit() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set unit(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get default_value() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set default_value(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get min_value() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set min_value(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get max_value() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set max_value(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            unit?: string;
            default_value?: string;
            min_value?: string;
            max_value?: string;
        }) {
            const message = new Parameter({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.unit != null) {
                message.unit = data.unit;
            }
            if (data.default_value != null) {
                message.default_value = data.default_value;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                unit?: string;
                default_value?: string;
                min_value?: string;
                max_value?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.unit != null) {
                data.unit = this.unit;
            }
            if (this.default_value != null) {
                data.default_value = this.default_value;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.unit === "string" && this.unit.length)
                writer.writeString(2, this.unit);
            if (typeof this.default_value === "string" && this.default_value.length)
                writer.writeString(3, this.default_value);
            if (typeof this.min_value === "string" && this.min_value.length)
                writer.writeString(4, this.min_value);
            if (typeof this.max_value === "string" && this.max_value.length)
                writer.writeString(5, this.max_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Parameter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Parameter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.unit = reader.readString();
                        break;
                    case 3:
                        message.default_value = reader.readString();
                        break;
                    case 4:
                        message.min_value = reader.readString();
                        break;
                    case 5:
                        message.max_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Parameter {
            return Parameter.deserialize(bytes);
        }
    }
}
