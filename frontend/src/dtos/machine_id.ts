/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: machine_id.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./shared_values";
import * as dependency_2 from "./machine_type";
import * as pb_1 from "google-protobuf";
export namespace dbos {
    export class MachineIdConfigs extends pb_1.Message {
        constructor(data?: any[] | {
            machine_id_configs?: MachineIdConfig[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("machine_id_configs" in data && data.machine_id_configs != undefined) {
                    this.machine_id_configs = data.machine_id_configs;
                }
            }
        }
        get machine_id_configs() {
            return pb_1.Message.getRepeatedWrapperField(this, MachineIdConfig, 1) as MachineIdConfig[];
        }
        set machine_id_configs(value: MachineIdConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            machine_id_configs?: ReturnType<typeof MachineIdConfig.prototype.toObject>[];
        }) {
            const message = new MachineIdConfigs({});
            if (data.machine_id_configs != null) {
                message.machine_id_configs = data.machine_id_configs.map(item => MachineIdConfig.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                machine_id_configs?: ReturnType<typeof MachineIdConfig.prototype.toObject>[];
            } = {};
            if (this.machine_id_configs != null) {
                data.machine_id_configs = this.machine_id_configs.map((item: MachineIdConfig) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.machine_id_configs !== undefined)
                writer.writeRepeatedMessage(1, this.machine_id_configs, (item: MachineIdConfig) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MachineIdConfigs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MachineIdConfigs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.machine_id_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MachineIdConfig.deserialize(reader), MachineIdConfig));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MachineIdConfigs {
            return MachineIdConfigs.deserialize(bytes);
        }
    }
    export class MachineIdConfig extends pb_1.Message {
        constructor(data?: any[] | {
            version?: string;
            config_type?: dependency_1.dbos.ConfigType;
            id?: string;
            machine_name?: string;
            mqtt_id_check?: dependency_1.dbos.MqttId;
            type_config?: dependency_2.dbos.MachineTypeConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("config_type" in data && data.config_type != undefined) {
                    this.config_type = data.config_type;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("machine_name" in data && data.machine_name != undefined) {
                    this.machine_name = data.machine_name;
                }
                if ("mqtt_id_check" in data && data.mqtt_id_check != undefined) {
                    this.mqtt_id_check = data.mqtt_id_check;
                }
                if ("type_config" in data && data.type_config != undefined) {
                    this.type_config = data.type_config;
                }
            }
        }
        get version() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_type() {
            return pb_1.Message.getField(this, 2) as dependency_1.dbos.ConfigType;
        }
        set config_type(value: dependency_1.dbos.ConfigType) {
            pb_1.Message.setField(this, 2, value);
        }
        get id() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get machine_name() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set machine_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get mqtt_id_check() {
            return pb_1.Message.getWrapperField(this, dependency_1.dbos.MqttId, 5) as dependency_1.dbos.MqttId;
        }
        set mqtt_id_check(value: dependency_1.dbos.MqttId) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get type_config() {
            return pb_1.Message.getWrapperField(this, dependency_2.dbos.MachineTypeConfig, 6) as dependency_2.dbos.MachineTypeConfig;
        }
        set type_config(value: dependency_2.dbos.MachineTypeConfig) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        static fromObject(data: {
            version?: string;
            config_type?: dependency_1.dbos.ConfigType;
            id?: string;
            machine_name?: string;
            mqtt_id_check?: ReturnType<typeof dependency_1.dbos.MqttId.prototype.toObject>;
            type_config?: ReturnType<typeof dependency_2.dbos.MachineTypeConfig.prototype.toObject>;
        }) {
            const message = new MachineIdConfig({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.config_type != null) {
                message.config_type = data.config_type;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.machine_name != null) {
                message.machine_name = data.machine_name;
            }
            if (data.mqtt_id_check != null) {
                message.mqtt_id_check = dependency_1.dbos.MqttId.fromObject(data.mqtt_id_check);
            }
            if (data.type_config != null) {
                message.type_config = dependency_2.dbos.MachineTypeConfig.fromObject(data.type_config);
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
                config_type?: dependency_1.dbos.ConfigType;
                id?: string;
                machine_name?: string;
                mqtt_id_check?: ReturnType<typeof dependency_1.dbos.MqttId.prototype.toObject>;
                type_config?: ReturnType<typeof dependency_2.dbos.MachineTypeConfig.prototype.toObject>;
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.config_type != null) {
                data.config_type = this.config_type;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.machine_name != null) {
                data.machine_name = this.machine_name;
            }
            if (this.mqtt_id_check != null) {
                data.mqtt_id_check = this.mqtt_id_check.toObject();
            }
            if (this.type_config != null) {
                data.type_config = this.type_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(1, this.version);
            if (this.config_type !== undefined)
                writer.writeEnum(2, this.config_type);
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(3, this.id);
            if (typeof this.machine_name === "string" && this.machine_name.length)
                writer.writeString(4, this.machine_name);
            if (this.mqtt_id_check !== undefined)
                writer.writeMessage(5, this.mqtt_id_check, () => this.mqtt_id_check.serialize(writer));
            if (this.type_config !== undefined)
                writer.writeMessage(6, this.type_config, () => this.type_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MachineIdConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MachineIdConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    case 2:
                        message.config_type = reader.readEnum();
                        break;
                    case 3:
                        message.id = reader.readString();
                        break;
                    case 4:
                        message.machine_name = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.mqtt_id_check, () => message.mqtt_id_check = dependency_1.dbos.MqttId.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.type_config, () => message.type_config = dependency_2.dbos.MachineTypeConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MachineIdConfig {
            return MachineIdConfig.deserialize(bytes);
        }
    }
}
