/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: main.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./shared_values";
import * as pb_1 from "google-protobuf";
export namespace dbos {
    export class MainConfig extends pb_1.Message {
        constructor(data?: any[] | {
            version?: string;
            config_type?: dependency_1.dbos.ConfigType;
            mqtt_broker_address?: string;
            wildcard?: string;
            splitting_character?: string;
            active_configs?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("config_type" in data && data.config_type != undefined) {
                    this.config_type = data.config_type;
                }
                if ("mqtt_broker_address" in data && data.mqtt_broker_address != undefined) {
                    this.mqtt_broker_address = data.mqtt_broker_address;
                }
                if ("wildcard" in data && data.wildcard != undefined) {
                    this.wildcard = data.wildcard;
                }
                if ("splitting_character" in data && data.splitting_character != undefined) {
                    this.splitting_character = data.splitting_character;
                }
                if ("active_configs" in data && data.active_configs != undefined) {
                    this.active_configs = data.active_configs;
                }
            }
        }
        get version() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_type() {
            return pb_1.Message.getField(this, 2) as dependency_1.dbos.ConfigType;
        }
        set config_type(value: dependency_1.dbos.ConfigType) {
            pb_1.Message.setField(this, 2, value);
        }
        get mqtt_broker_address() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set mqtt_broker_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get wildcard() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set wildcard(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get splitting_character() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set splitting_character(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get active_configs() {
            return pb_1.Message.getField(this, 6) as string[];
        }
        set active_configs(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            version?: string;
            config_type?: dependency_1.dbos.ConfigType;
            mqtt_broker_address?: string;
            wildcard?: string;
            splitting_character?: string;
            active_configs?: string[];
        }) {
            const message = new MainConfig({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.config_type != null) {
                message.config_type = data.config_type;
            }
            if (data.mqtt_broker_address != null) {
                message.mqtt_broker_address = data.mqtt_broker_address;
            }
            if (data.wildcard != null) {
                message.wildcard = data.wildcard;
            }
            if (data.splitting_character != null) {
                message.splitting_character = data.splitting_character;
            }
            if (data.active_configs != null) {
                message.active_configs = data.active_configs;
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
                config_type?: dependency_1.dbos.ConfigType;
                mqtt_broker_address?: string;
                wildcard?: string;
                splitting_character?: string;
                active_configs?: string[];
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.config_type != null) {
                data.config_type = this.config_type;
            }
            if (this.mqtt_broker_address != null) {
                data.mqtt_broker_address = this.mqtt_broker_address;
            }
            if (this.wildcard != null) {
                data.wildcard = this.wildcard;
            }
            if (this.splitting_character != null) {
                data.splitting_character = this.splitting_character;
            }
            if (this.active_configs != null) {
                data.active_configs = this.active_configs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(1, this.version);
            if (this.config_type !== undefined)
                writer.writeEnum(2, this.config_type);
            if (typeof this.mqtt_broker_address === "string" && this.mqtt_broker_address.length)
                writer.writeString(3, this.mqtt_broker_address);
            if (typeof this.wildcard === "string" && this.wildcard.length)
                writer.writeString(4, this.wildcard);
            if (typeof this.splitting_character === "string" && this.splitting_character.length)
                writer.writeString(5, this.splitting_character);
            if (this.active_configs !== undefined)
                writer.writeRepeatedString(6, this.active_configs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MainConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MainConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    case 2:
                        message.config_type = reader.readEnum();
                        break;
                    case 3:
                        message.mqtt_broker_address = reader.readString();
                        break;
                    case 4:
                        message.wildcard = reader.readString();
                        break;
                    case 5:
                        message.splitting_character = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MainConfig {
            return MainConfig.deserialize(bytes);
        }
    }
}
