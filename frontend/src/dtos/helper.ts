/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: helper.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace universal {
    export class Position extends pb_1.Message {
        constructor(data?: any[] | {
            x_pos?: number;
            y_pos?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x_pos" in data && data.x_pos != undefined) {
                    this.x_pos = data.x_pos;
                }
                if ("y_pos" in data && data.y_pos != undefined) {
                    this.y_pos = data.y_pos;
                }
            }
        }
        get x_pos() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set x_pos(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get y_pos() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set y_pos(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            x_pos?: number;
            y_pos?: number;
        }) {
            const message = new Position({});
            if (data.x_pos != null) {
                message.x_pos = data.x_pos;
            }
            if (data.y_pos != null) {
                message.y_pos = data.y_pos;
            }
            return message;
        }
        toObject() {
            const data: {
                x_pos?: number;
                y_pos?: number;
            } = {};
            if (this.x_pos != null) {
                data.x_pos = this.x_pos;
            }
            if (this.y_pos != null) {
                data.y_pos = this.y_pos;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.x_pos !== undefined)
                writer.writeInt32(1, this.x_pos);
            if (this.y_pos !== undefined)
                writer.writeInt32(2, this.y_pos);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x_pos = reader.readInt32();
                        break;
                    case 2:
                        message.y_pos = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Position {
            return Position.deserialize(bytes);
        }
    }
    export class ViewElement extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            view_type?: string;
            title?: string;
            position?: Position;
            size?: Size;
            values?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("view_type" in data && data.view_type != undefined) {
                    this.view_type = data.view_type;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get view_type() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set view_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get position() {
            return pb_1.Message.getWrapperField(this, Position, 4) as Position;
        }
        set position(value: Position) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get size() {
            return pb_1.Message.getWrapperField(this, Size, 5) as Size;
        }
        set size(value: Size) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get values() {
            return pb_1.Message.getField(this, 6) as string[];
        }
        set values(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            view_type?: string;
            title?: string;
            position?: ReturnType<typeof Position.prototype.toObject>;
            size?: ReturnType<typeof Size.prototype.toObject>;
            values?: string[];
        }) {
            const message = new ViewElement({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.view_type != null) {
                message.view_type = data.view_type;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.position != null) {
                message.position = Position.fromObject(data.position);
            }
            if (data.size != null) {
                message.size = Size.fromObject(data.size);
            }
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                view_type?: string;
                title?: string;
                position?: ReturnType<typeof Position.prototype.toObject>;
                size?: ReturnType<typeof Size.prototype.toObject>;
                values?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.view_type != null) {
                data.view_type = this.view_type;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.size != null) {
                data.size = this.size.toObject();
            }
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.view_type === "string" && this.view_type.length)
                writer.writeString(2, this.view_type);
            if (typeof this.title === "string" && this.title.length)
                writer.writeString(3, this.title);
            if (this.position !== undefined)
                writer.writeMessage(4, this.position, () => this.position.serialize(writer));
            if (this.size !== undefined)
                writer.writeMessage(5, this.size, () => this.size.serialize(writer));
            if (this.values !== undefined)
                writer.writeRepeatedString(6, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewElement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewElement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.view_type = reader.readString();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.position, () => message.position = Position.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.size, () => message.size = Size.deserialize(reader));
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewElement {
            return ViewElement.deserialize(bytes);
        }
    }
    export class Size extends pb_1.Message {
        constructor(data?: any[] | {
            width?: number;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get width() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get height() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            width?: number;
            height?: number;
        }) {
            const message = new Size({});
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                width?: number;
                height?: number;
            } = {};
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.width !== undefined)
                writer.writeUint32(1, this.width);
            if (this.height !== undefined)
                writer.writeUint32(2, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Size {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Size();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.width = reader.readUint32();
                        break;
                    case 2:
                        message.height = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Size {
            return Size.deserialize(bytes);
        }
    }
}
