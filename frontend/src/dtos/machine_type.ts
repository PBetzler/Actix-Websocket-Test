/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: machine_type.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./helper";
import * as dependency_2 from "./shared_values";
import * as pb_1 from "google-protobuf";
export namespace dbos {
    export class MachineTypeConfig extends pb_1.Message {
        constructor(data?: any[] | {
            version?: string;
            config_type?: dependency_2.dbos.ConfigType;
            image?: string;
            view_elements?: dependency_1.universal.ViewElement[];
            refers?: string;
            manufacturer?: string;
            timestamp_position?: string;
            parameter?: Parameter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 8], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("config_type" in data && data.config_type != undefined) {
                    this.config_type = data.config_type;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("view_elements" in data && data.view_elements != undefined) {
                    this.view_elements = data.view_elements;
                }
                if ("refers" in data && data.refers != undefined) {
                    this.refers = data.refers;
                }
                if ("manufacturer" in data && data.manufacturer != undefined) {
                    this.manufacturer = data.manufacturer;
                }
                if ("timestamp_position" in data && data.timestamp_position != undefined) {
                    this.timestamp_position = data.timestamp_position;
                }
                if ("parameter" in data && data.parameter != undefined) {
                    this.parameter = data.parameter;
                }
            }
        }
        get version() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config_type() {
            return pb_1.Message.getField(this, 2) as dependency_2.dbos.ConfigType;
        }
        set config_type(value: dependency_2.dbos.ConfigType) {
            pb_1.Message.setField(this, 2, value);
        }
        get image() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set image(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get view_elements() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.universal.ViewElement, 4) as dependency_1.universal.ViewElement[];
        }
        set view_elements(value: dependency_1.universal.ViewElement[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get refers() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set refers(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get manufacturer() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set manufacturer(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get timestamp_position() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set timestamp_position(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get parameter() {
            return pb_1.Message.getRepeatedWrapperField(this, Parameter, 8) as Parameter[];
        }
        set parameter(value: Parameter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            version?: string;
            config_type?: dependency_2.dbos.ConfigType;
            image?: string;
            view_elements?: ReturnType<typeof dependency_1.universal.ViewElement.prototype.toObject>[];
            refers?: string;
            manufacturer?: string;
            timestamp_position?: string;
            parameter?: ReturnType<typeof Parameter.prototype.toObject>[];
        }) {
            const message = new MachineTypeConfig({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.config_type != null) {
                message.config_type = data.config_type;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.view_elements != null) {
                message.view_elements = data.view_elements.map(item => dependency_1.universal.ViewElement.fromObject(item));
            }
            if (data.refers != null) {
                message.refers = data.refers;
            }
            if (data.manufacturer != null) {
                message.manufacturer = data.manufacturer;
            }
            if (data.timestamp_position != null) {
                message.timestamp_position = data.timestamp_position;
            }
            if (data.parameter != null) {
                message.parameter = data.parameter.map(item => Parameter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                version?: string;
                config_type?: dependency_2.dbos.ConfigType;
                image?: string;
                view_elements?: ReturnType<typeof dependency_1.universal.ViewElement.prototype.toObject>[];
                refers?: string;
                manufacturer?: string;
                timestamp_position?: string;
                parameter?: ReturnType<typeof Parameter.prototype.toObject>[];
            } = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.config_type != null) {
                data.config_type = this.config_type;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.view_elements != null) {
                data.view_elements = this.view_elements.map((item: dependency_1.universal.ViewElement) => item.toObject());
            }
            if (this.refers != null) {
                data.refers = this.refers;
            }
            if (this.manufacturer != null) {
                data.manufacturer = this.manufacturer;
            }
            if (this.timestamp_position != null) {
                data.timestamp_position = this.timestamp_position;
            }
            if (this.parameter != null) {
                data.parameter = this.parameter.map((item: Parameter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(1, this.version);
            if (this.config_type !== undefined)
                writer.writeEnum(2, this.config_type);
            if (typeof this.image === "string" && this.image.length)
                writer.writeString(3, this.image);
            if (this.view_elements !== undefined)
                writer.writeRepeatedMessage(4, this.view_elements, (item: dependency_1.universal.ViewElement) => item.serialize(writer));
            if (typeof this.refers === "string" && this.refers.length)
                writer.writeString(5, this.refers);
            if (typeof this.manufacturer === "string" && this.manufacturer.length)
                writer.writeString(6, this.manufacturer);
            if (typeof this.timestamp_position === "string" && this.timestamp_position.length)
                writer.writeString(7, this.timestamp_position);
            if (this.parameter !== undefined)
                writer.writeRepeatedMessage(8, this.parameter, (item: Parameter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MachineTypeConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MachineTypeConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readString();
                        break;
                    case 2:
                        message.config_type = reader.readEnum();
                        break;
                    case 3:
                        message.image = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.view_elements, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.universal.ViewElement.deserialize(reader), dependency_1.universal.ViewElement));
                        break;
                    case 5:
                        message.refers = reader.readString();
                        break;
                    case 6:
                        message.manufacturer = reader.readString();
                        break;
                    case 7:
                        message.timestamp_position = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.parameter, () => pb_1.Message.addToRepeatedWrapperField(message, 8, Parameter.deserialize(reader), Parameter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MachineTypeConfig {
            return MachineTypeConfig.deserialize(bytes);
        }
    }
    export class Parameter extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            parameter_key?: dependency_2.dbos.MqttId;
            parameter_value?: Parameter_MQTT_Value;
            parameter_topics?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("parameter_key" in data && data.parameter_key != undefined) {
                    this.parameter_key = data.parameter_key;
                }
                if ("parameter_value" in data && data.parameter_value != undefined) {
                    this.parameter_value = data.parameter_value;
                }
                if ("parameter_topics" in data && data.parameter_topics != undefined) {
                    this.parameter_topics = data.parameter_topics;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get parameter_key() {
            return pb_1.Message.getWrapperField(this, dependency_2.dbos.MqttId, 2) as dependency_2.dbos.MqttId;
        }
        set parameter_key(value: dependency_2.dbos.MqttId) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get parameter_value() {
            return pb_1.Message.getWrapperField(this, Parameter_MQTT_Value, 3) as Parameter_MQTT_Value;
        }
        set parameter_value(value: Parameter_MQTT_Value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get parameter_topics() {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set parameter_topics(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            parameter_key?: ReturnType<typeof dependency_2.dbos.MqttId.prototype.toObject>;
            parameter_value?: ReturnType<typeof Parameter_MQTT_Value.prototype.toObject>;
            parameter_topics?: string[];
        }) {
            const message = new Parameter({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.parameter_key != null) {
                message.parameter_key = dependency_2.dbos.MqttId.fromObject(data.parameter_key);
            }
            if (data.parameter_value != null) {
                message.parameter_value = Parameter_MQTT_Value.fromObject(data.parameter_value);
            }
            if (data.parameter_topics != null) {
                message.parameter_topics = data.parameter_topics;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                parameter_key?: ReturnType<typeof dependency_2.dbos.MqttId.prototype.toObject>;
                parameter_value?: ReturnType<typeof Parameter_MQTT_Value.prototype.toObject>;
                parameter_topics?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.parameter_key != null) {
                data.parameter_key = this.parameter_key.toObject();
            }
            if (this.parameter_value != null) {
                data.parameter_value = this.parameter_value.toObject();
            }
            if (this.parameter_topics != null) {
                data.parameter_topics = this.parameter_topics;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.parameter_key !== undefined)
                writer.writeMessage(2, this.parameter_key, () => this.parameter_key.serialize(writer));
            if (this.parameter_value !== undefined)
                writer.writeMessage(3, this.parameter_value, () => this.parameter_value.serialize(writer));
            if (this.parameter_topics !== undefined)
                writer.writeRepeatedString(4, this.parameter_topics);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Parameter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Parameter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.parameter_key, () => message.parameter_key = dependency_2.dbos.MqttId.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.parameter_value, () => message.parameter_value = Parameter_MQTT_Value.deserialize(reader));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Parameter {
            return Parameter.deserialize(bytes);
        }
    }
    export class Parameter_MQTT_Value extends pb_1.Message {
        constructor(data?: any[] | {
            position?: string;
            unit?: string;
            min_value?: string;
            max_value?: string;
            default_value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("unit" in data && data.unit != undefined) {
                    this.unit = data.unit;
                }
                if ("min_value" in data && data.min_value != undefined) {
                    this.min_value = data.min_value;
                }
                if ("max_value" in data && data.max_value != undefined) {
                    this.max_value = data.max_value;
                }
                if ("default_value" in data && data.default_value != undefined) {
                    this.default_value = data.default_value;
                }
            }
        }
        get position() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set position(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get unit() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set unit(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get min_value() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set min_value(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_value() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set max_value(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_value() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set default_value(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            position?: string;
            unit?: string;
            min_value?: string;
            max_value?: string;
            default_value?: string;
        }) {
            const message = new Parameter_MQTT_Value({});
            if (data.position != null) {
                message.position = data.position;
            }
            if (data.unit != null) {
                message.unit = data.unit;
            }
            if (data.min_value != null) {
                message.min_value = data.min_value;
            }
            if (data.max_value != null) {
                message.max_value = data.max_value;
            }
            if (data.default_value != null) {
                message.default_value = data.default_value;
            }
            return message;
        }
        toObject() {
            const data: {
                position?: string;
                unit?: string;
                min_value?: string;
                max_value?: string;
                default_value?: string;
            } = {};
            if (this.position != null) {
                data.position = this.position;
            }
            if (this.unit != null) {
                data.unit = this.unit;
            }
            if (this.min_value != null) {
                data.min_value = this.min_value;
            }
            if (this.max_value != null) {
                data.max_value = this.max_value;
            }
            if (this.default_value != null) {
                data.default_value = this.default_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.position === "string" && this.position.length)
                writer.writeString(1, this.position);
            if (typeof this.unit === "string" && this.unit.length)
                writer.writeString(2, this.unit);
            if (typeof this.min_value === "string" && this.min_value.length)
                writer.writeString(3, this.min_value);
            if (typeof this.max_value === "string" && this.max_value.length)
                writer.writeString(4, this.max_value);
            if (typeof this.default_value === "string" && this.default_value.length)
                writer.writeString(5, this.default_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Parameter_MQTT_Value {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Parameter_MQTT_Value();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.position = reader.readString();
                        break;
                    case 2:
                        message.unit = reader.readString();
                        break;
                    case 3:
                        message.min_value = reader.readString();
                        break;
                    case 4:
                        message.max_value = reader.readString();
                        break;
                    case 5:
                        message.default_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Parameter_MQTT_Value {
            return Parameter_MQTT_Value.deserialize(bytes);
        }
    }
}
